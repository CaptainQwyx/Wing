=head1 NAME

First App - How to get up and running quickly.

=head1 DESCRIPTION

This document will walk you through how to build out your first app. Note, that we don't know what you're actually trying to build, so we'll build a rather generic app in the hopes that it helps you make sense of how to build an app using Wing.


=head2 Before You Get Started

This document assumes you've already bootstrapped your app using the instructions provided in /data/Wing/README.txt.

=head2 Adding A Class

To do anything useful with Wing, you'll want to start adding classes to it. For our demo app we'll create a basic document submission system. Each object will be called a page.

 wing class --add=Page

NOTE: You should use the singular form of the word, not the plural here. So "Page" not "Pages".

This will add C<lib/MyApp/DB/Result/Page.pm>, C<lib/MyApp/Rest/Page.pm>, and C<lib/MyApp/Web/Page.pm>.

=head2 Add Fields To The Class

Edit C<lib/MyApp/DB/Result/Page.pm> and add some fields to it. Let's start by adding a C<description> field. We're able to add fields because of L<Wing::Role::Result::Field>.

 __PACKAGE__->wing_fields(
  name => {
    dbic                => { data_type => 'varchar', size => 60, is_nullable => 0 },
    view                => 'public',
    edit                => 'required',
  },
  description => {
    dbic                => { data_type => 'mediumtext', is_nullable => 1 },
    view                => 'public',
    edit                => 'postable',
  },
 );

We set the C<dbic> field to a L<DBIx::Class> definition for the field. 

C<view> can be C<public>, C<private>, C<admin>, or left out entirely if we don't want to expose it via web/REST. More information can be found in L<Wing::Role::Result::Field>.

C<edit> can be C<postable>, C<required>, C<unique>, C<admin>, or left out entirely if we don't want it exposed via web/REST. More information can be found in L<Wing::Role::Result::Field>

=head2 Using Roles

There are other roles you can use in your app, and you can even create your own. Check out C</data/Wing/lib/Role/Result> for other roles. For now, let's use two.

 with 'Wing::Role::Result::UserControlled';

The C<UserControlled> role makes the object editable only by the user that owns the object (as well as admins). Let's also add:

 with 'Wing::Role::Result::UriPart';

The C<UriPart> role auto-generates a URI Part based upon the name of the object. This allows us to make the object accessible via a human-friendly URL rather than an ID. 

=head2 The Completed Class

Your class should now look like this.

 package MyApp::DB::Result::Page;

 use Moose;
 use Wing::Perl;
 use Ouch;
 extends 'Wing::DB::Result';

 with 'Wing::Role::Result::Field';
 with 'Wing::Role::Result::UriPart';
 with 'Wing::Role::Result::UserControlled';

 __PACKAGE__->wing_fields(
  name => {
    dbic                => { data_type => 'varchar', size => 60, is_nullable => 0 },
    view                => 'public',
    edit                => 'required',
  },
  description => {
    dbic                => { data_type => 'mediumtext', is_nullable => 1 },
    view                => 'public',
    edit                => 'postable',
  },
 );

 __PACKAGE__->wing_finalize_class( table_name => 'pages');

 no Moose;
 __PACKAGE__->meta->make_immutable(inline_constructor => 0);

=head2 Updating The Database

Now that we've added some stuff to our class, we need to upgrade the database. There are three parts to this.

=over

=item 1

First we need to update the database schema version number. Edit C<lib/MyApp/DB.pm> and increment the version number by one.

 our $VERSION = 2;

=item 2

Now we need to generate the upgrade scripts.

 wing db --prep

=item 3

And now we can apply the upgrade scripts to our database.

 wing db --up

=back

=head2 Generating Templates

Now that we have a class with some basic fields, we can generate some templates.

 wing class --template=Page

This will generate some templates in C</data/MyApp/views/page>

B<NOTE:> The templates that are created are functional, but not pretty. It's your job to make them look how you want. And also to add new stuff to the templates as you add new fields to the class in the future. Also, the templates may have more fields exposed in them than you really want exposed. For example, the C<user_id> field will be exposed in these templates at this point. You probably want to make that a hidden field instead of a text field. And you probably want to convert the C<description> field to a <textarea> rather than an <input>.

=head2 Testing

At this point we can test our app. Just fire up nginx and the other services using the description from README.txt. And then you can access it at C<http://localhost/page>

=head2 Updating the Web Interface

You may have noticed that when you view your page it's being accessed via it's ID still. We'll have a do a few updates to make it work via the URI Part.

=head3 Updating The Routes

We need to edit C<lib/MyApp/Web/Page.pm> to display via our URI part rather than the id. The first route we need to update is:

 post '/page'

In the last line of that route we reference the page by ID so let's change that from 

 return redirect '/page/'.$page->id.'?success_message=Created successfully';

To this:

 return redirect '/page/'.$page->uri_part.'?success_message=Created successfully';

Then we need to update the view route itself. It is called:

 get '/page/:id'

We need to change that route to:

 get '/page/:uri_part'

And then we need to change how we fetch the page. Instead of:

 my $page = fetch_object('Page');

We need to do:

 my $page = site_db()->resultset('Page')->search({uri_part => params->{uri_part}}, { rows => 1})->single;

And finally, we need to update the put route:

 put '/page/:id'

We're actually going to keep the route as ID here. We don't care if we're referencing the page by ID when editing it. We just care about this for viewing purposes. But we do need to update the route after redirection. From this:

    if (hug) {
        return redirect '/page/'.$page->id.'?error_message='.bleep;
    }
    else {
        $page->update;
        return redirect '/page/'.$page->id.'?success_message=Created successfully';
    }

To this:

    if (hug) {
        return redirect '/page/'.$page->uri_part.'?error_message='.bleep;
    }
    else {
        $page->update;
        return redirect '/page/'.$page->uri_part.'?success_message=Created successfully';
    }

=head3 Updating The Templates

Updating the web handler alone won't do everything we need it to do. We also need to update the C<index.tt> template so that it's linking via the URI Part. Edit C<views/page/index.tt> and replace:

 <td><a href="/page/${id}">${name}</a></td>

with this:

 <td><a href="/page/${uri_part}">${name}</a></td>


=head3 More Testing

At this point you should be able to browse your new class via URI parts instead of ids. 

=head2 Making A Class Act As Your Home Page

You may want to make a particular class respond as your home page. That's pretty simple. All you have to do is update this route:

 get '/page'

To be this:

 get '/'

Now it will respond at C<http://localhost/> rather than C<http://localhost/page>.  If you prefer, you can leave the route as it is, and just install another route that redirects you, like this:

 get '/' => sub {
	redirect '/page';
 };

=head2 Enabling Autosave

If you're running a site where it's safe to rely 100% on Javascript and Ajax, then you can start to take advantage of Wing's incredible REST API features. The first and easiest of these is called Autosave. How it works is that every time a user updates a field, autosave automatically posts that change back to the server, so they never have to hit the save button.

To enable it, you'll edit your C<view/page/view_edit.tt> template and update all of your form fields to have a CSS class called C<autosave>. Here's an example:

 <input type="text' id="name" name="name" value="[% page.name FILTER html %]" class="autosave">

And then at the bottom of the page in the C<foot_tags> block, you'll add this little bit of javascript.

 wing.attach_autosave('page/[% page.id %]', '.autosave');

That says, we're going to call C<PUT /api/page/xxx> every time a field with the class C<.autosave> is modified and save the value of that field. There's no special magic to the class name. You could call it "quicksave" instead of "autosave" if you like.

=head3 Advanced Autosave Usage

If you enable every field in the form with autosave, then you can actually remove the "Save" button from the form all together. You could even get rid of the C<put '/page/:id'> route if you wanted to, since we're not saving via the web form anymore, but instead using the auto-generate REST API. However, if you're in an environment where you'd prefer to have a non-AJAX backup, then just leave the form as is. Users can use the autosave or the save button just fine. 

=head1 Conclusion

You've now got a basic understanding of how to build apps using Wing. From here, it's all about practice and expertise. Plain Black (L<http://www.plainblack.com/>) has consulting services if you need professional assistance, or you can just post questions on Wing's GitHub page if you're more of a do-it-yourselfer. 


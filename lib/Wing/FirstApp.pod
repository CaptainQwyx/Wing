=head1 NAME

First App - How to get up and running quickly.

=head1 DESCRIPTION

This document will walk you through how to build out your first app. Note, that we don't know what you're actually trying to build, so we'll build a rather generic app in the hopes that it helps you make sense of how to build an app using Wing.


=head2 Before You Get Started

This document assumes you've already bootstrapped your app using the instructions provided in /data/Wing/README.txt.

=head2 Adding A Class

To do anything useful with Wing, you'll want to start adding classes to it. For our demo app we'll create a basic document submission system. Each object will be called a page.

 wing class --add=Page

NOTE: You should use the singular form of the word, not the plural here. So "Page" not "Pages".

This will add C<lib/MyApp/DB/Result/Page.pm>, C<lib/MyApp/Rest/Page.pm>, and C<lib/MyApp/Web/Page.pm>.

=head2 Add Fields To The Class

Edit C<lib/MyApp/DB/Result/Page.pm> and add some fields to it. Let's start by adding a C<description> field. We're able to add fields because of L<Wing::Role::Result::Field>.

 __PACKAGE__->wing_fields(
  name => {
    dbic                => { data_type => 'varchar', size => 60, is_nullable => 0 },
    view                => 'public',
    edit                => 'required',
  },
  description => {
    dbic                => { data_type => 'mediumtext', is_nullable => 1 },
    view                => 'public',
    edit                => 'postable',
  },
 );

We set the C<dbic> field to a L<DBIx::Class> definition for the field. You can consult L<DBIx::Class::ResultSource> to find what fields can be set for the C<dbic> definition. 

C<view> can be C<public>, C<private>, C<admin>, or left out entirely if we don't want to expose it via web/REST. More information can be found in L<Wing::Role::Result::Field>.

C<edit> can be C<postable>, C<required>, C<unique>, C<admin>, or left out entirely if we don't want it exposed via web/REST. More information can be found in L<Wing::Role::Result::Field>

=head2 Using Roles

There are other roles you can use in your app, and you can even create your own. Check out C</data/Wing/lib/Role/Result> for other roles. For now, let's use one.

 with 'Wing::Role::Result::UserControlled';

The C<UserControlled> role makes the object editable only by the user that owns the object (as well as admins). 

=head2 The Completed Class

Your class should now look like this.

 package MyApp::DB::Result::Page;

 use Moose;
 use Wing::Perl;
 use Ouch;
 extends 'Wing::DB::Result';

 with 'Wing::Role::Result::Field';
 with 'Wing::Role::Result::UriPart';
 with 'Wing::Role::Result::UserControlled';

 __PACKAGE__->wing_fields(
  name => {
    dbic                => { data_type => 'varchar', size => 60, is_nullable => 0 },
    view                => 'public',
    edit                => 'required',
  },
  description => {
    dbic                => { data_type => 'mediumtext', is_nullable => 1 },
    view                => 'public',
    edit                => 'postable',
  },
 );

 __PACKAGE__->wing_finalize_class( table_name => 'pages');

 no Moose;
 __PACKAGE__->meta->make_immutable(inline_constructor => 0);

=head2 Updating The Database

Now that we've added some stuff to our class, we need to upgrade the database. There are three parts to this.

=over

=item 1

First we need to update the database schema version number. Edit C<lib/MyApp/DB.pm> and increment the version number by one.

 our $VERSION = 2;

=item 2

Now we need to generate the upgrade scripts.

 wing db --prep

=item 3

And now we can apply the upgrade scripts to our database.

 wing db --up

=back

=head2 Generating Templates

Now that we have a class with some basic fields, we can generate some templates.

 wing class --template=Page

This will generate some templates in C</data/MyApp/views/page>

B<NOTE:> The templates that are created are functional, but not pretty. It's your job to make them look how you want. And also to add new stuff to the templates as you add new fields to the class in the future. Also, the templates may have more fields exposed in them than you really want exposed. For example, the C<user_id> field will be exposed in these templates at this point. 

=head2 Testing

At this point we can test our app. Just fire up nginx and the other services using the description from README.txt. And then you can access it at C<http://localhost/pages>

=head2 Making A Class Act As Your Home Page

You may want to make a particular class respond as your home page. That's pretty simple. All you have to do is update this route:

 get '/pages'

To be this:

 get '/'

Now it will respond at C<http://localhost/> rather than C<http://localhost/page>.  If you prefer, you can leave the route as it is, and just install another route that redirects you, like this:

 get '/' => sub {
	redirect '/pages';
 };

=head2 Integrating with AngularJS

Wing supports AngularJS out of the box and even has a nice convenience wrapper for RESTful interaction. Here's how you take advantage of it in an example app:
 
 var app = angular.module('myApp', ['wing']);

Now you can write your AngularJS app as normal, and any calls like this will automatically get some Wing helpers added to them:

 $http.get('/api/user', {})
    .success(function(response) { 
      ...
    });

This means that the Wing throbber will automatically load and unload. Exceptions will be displayed as C<wing.error()> messages. Warnings will be displayed as C<wing.warn()) messages, etc. 

=head1 Conclusion

You've now got a basic understanding of how to build apps using Wing. From here, it's all about practice and expertise. Plain Black (L<http://www.plainblack.com/>) has consulting services if you need professional assistance, or you can just post questions on Wing's GitHub page if you're more of a do-it-yourselfer. 

=cut

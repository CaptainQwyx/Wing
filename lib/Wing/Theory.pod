=head1 NAME

Theory - How to take the concepts of Wing and put them together.

=head1 DESCRIPTION

Wing is a thin layer of glue and sugar that binds L<DBIx::Class> to L<Dancer> to allow you to easily create web service enabled applications. 

=head2 Role-Based Architecture

Pretty much everything in Wing is a Role. This allows you to create the objects you want to create, and only use the components of Wing you need. The one major exception to this is L<Wing::DB::Result>. L<Wing::DB::Result> needs to be the base class of all of your objects. It sets up your objects to be compatible with Wing. Here's an example of an object:

 package MyApp::DB::Result::User;
 
 use Wing::Perl;
 use Moose;
 
 extends 'Wing::DB::Result';
 
 __PACKAGE__->wing_finalize_class( table_name => 'users');
 
 no Moose;
 __PACKAGE__->meta->make_immutable(inline_constructor => 0);
 
The above is a valid Wing class. It doesn't do anything really, but it is a valid starting point.  If you were to add one additional line it would become a very useful object:

 with 'Wing::Role::Result::User';
 
With just that one incantation, you now have a valid Wing user object with permissions and more. And that's the beauty of the role-based architecture. With very little code, you can make incredibly powerful objects. It's not just adding fields like C<username>, but also setting up validation for those fields for both web and web services, database storage and schema creation, Perl accessors, and more.

=head2 Configuration

There are several configuration files that come with Wing. That's because Wing is actually gluing together various systems. Here's a description of what they are and where you can find them.

=over

=item WING_HOME

An environment variable specifying where the Wing codebase lives. Defaults to C</data/Wing>. Moving this to another location hasn't been tested, so it probably needs some work to make it movable.

=item WING_APP

An environment variable specifying where your app's codebase lives. Example: C</data/MyApp>

=item WING_CONFIG

An environment variable specifying where your app's config file lives. Example: C</data/MyApp/etc/wing.conf>

=item wing.conf

This is the configuration of the Wing application itself. It is a L<Config::JSON> file. You can usually find it in your app's C<etc> folder, and it's called C<wing.conf> by default. Although both the location and the name are customizable by setting the C<WING_CONFIG> environment variable.

=item log4perl.conf

This is the logging configuration used by both Wing and Dancer. It can be found at C</data/MyApp/etc/log4perl.conf>

=item config.yml

This is Dancer's configuration file. It can be found at C</data/MyApp/config.yml>. This will likely eventually be merged with C<wing.conf>.

=item nginx.conf

This is a sample nginx.conf that should be used to expose your app to the public. It can be found at C</data/MyApp/etc/nginx.conf>.

=back

=head2 Rate Limiting

Rest requests are rate-limited by user using the C<rpc_limit> directive in C<etc/wing.conf>. This is the number of requests per minute the user is allowed to make to the service. If you have public services that don't require a user session (because they don't use C<get_user_by_session_id> in L<Wing::Rest>), then they won't get rate limited. We made the choice not to rate limit public requests because most likely they'll be very quick, whereas posts will likely be uploading files or writing to the database.

=head2 Visitors vs Users

A person browsing a site without a session is a visitor. Because they don't have a session, they can't have any privileges, and they're also impossible to track. This is why we created the tracer cookie. In L<Wing::Dancer> you can call C<get_tracer> or C<expanded_params> to get the tracer cookie to track visitors. It's also automatically passed to all autogenerated Rest methods. And it's also used in roles like L<Wing::Role::Result::AnybodyControlled>, to ensure that if a visitor creates something, only that same visitor would be allowed to delete/update it.

Registered users on the other hand will have a L<Wing::Session> if they are authenticated. You'll be able to figure out who's logged in by calling C<get_user_by_session_id> in either L<Wing::Rest> or L<Wing::Web>. 

=head2 By Plain Black For Plain Black

While most application frameworks try to be all things to all people, Wing is not like that. If others find it useful and want to use it, that's awesome! However, everything in Wing is defaulted to Plain Black's preferences because Wing is first and foremost a tool we built for ourselves. This is not to say that we aren't open to adding your features or accepting patches. Just that things are set up a certain way because it's what we needed for our own use.

=head3 /data

Everything is installed in C</data> because at Plain Black we generally create a mount to a Network Attached storage device at C</data>. This allows us to move the application to another physical hardware box instantly. That's insanely useful for upgrades/rollbacks and for deployments.

=head3 Missing Functionality

You'll likely note that Wing is missing a lot of things that might be useful in a web app framework. This is likely because we either didn't need it yet, or we built it specifically into an application rather than the framework.

=cut
